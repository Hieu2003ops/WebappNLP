import streamlit as st
from streamlit_option_menu import option_menu
from numerize import numerize
import json
import numpy as np
from keras.preprocessing.text import tokenizer_from_json
from keras.preprocessing.sequence import pad_sequences
from keras.models import load_model
import pandas as pd
import plotly.express as px
from sqlalchemy import create_engine
import urllib
from tqdm import tqdm
from pyvi import ViTokenizer

# background color
def set_bg_and_text_color():
    st.markdown(
        """
        <style>
        .stApp {
            background-color: bisque;
        }
        h1 {
            color: black;
        }
        /* Change the header background */
        header .st-ck {
            background-color: bisque;
        }
        /* Change the color of header text if needed */
        header .st-ck .st-bj {
            color: black;
        }
        /* Additional selectors for other text elements you want to change */
        </style>
        """,
        unsafe_allow_html=True
    )

# Define preprocessing function
def vns_preprocessing(line):
    line = line.strip()
    for sc in SPEC_CHARS:
        line = line.replace(sc, ' ')
    line = str(ViTokenizer.tokenize(line))
    words = line.split()
    words = [w for w in words if w.lower() not in STOP_WORDS]
    return ' '.join(words)

# predict def
def predict_sentiment(user_input):
    try:
        text = vns_preprocessing(user_input)
        sequences_test = tokenizer.texts_to_sequences([text])
        sequences_padded = pad_sequences(sequences_test, maxlen=128, padding='post', truncating='post')

        # D·ª± ƒëo√°n t·ª´ c·∫£ hai models
        prediction1 = model1.predict(sequences_padded)
        prediction2 = model2.predict(sequences_padded)
        prediction3 = model3.predict(sequences_padded)
        # Chuy·ªÉn ƒë·ªïi s·ªë th√†nh chu·ªói t∆∞∆°ng ·ª©ng cho model1 v√† model2
        output1 = 'Negative' if np.argmax(prediction1, axis=1) == 0 else 'Neutral or Not Mentioned' if np.argmax(prediction1, axis=1) == 1 else 'Positive'
        output2 = 'Negative' if np.argmax(prediction2, axis=1) == 0 else 'Neutral or Not Mentioned' if np.argmax(prediction2, axis=1) == 1 else 'Positive'
        output3 = 'Negative' if np.argmax(prediction3, axis=1) == 0 else 'Neutral or Not Mentioned' if np.argmax(prediction3, axis=1) == 1 else 'Positive'

        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ c·∫£ hai models v·ªõi ti√™u ƒë·ªÅ t∆∞∆°ng ·ª©ng
        return "Describe product: " + output1, "Quality product: " + output2 , "Shipping product: " + output3
    except Exception as e:
        return f"An error occurred: {e}"
    
# Define display_result_with_emoji function  
def display_result_with_emoji(title, output):
    emoji = ''
    if 'Positive' in output:
        emoji = 'üòä'  # Happy emoji for positive sentiment
    elif 'Negative' in output:
        emoji = 'üòü'  # Sad emoji for negative sentiment
    else:  # Neutral or Not Mentioned
        emoji = 'üòê'  # Neutral face emoji for neutral sentiment

    st.success(f"{title} {output} {emoji}")

# Load models
model1 = load_model("sentiment_describes.h5")
model2 = load_model("sentiment_qualities.h5")
model3 = load_model("sentiment_shipping.h5")

# Load tokenizer
with open('tokenizer.json', 'r', encoding='utf-8') as f:
    tokenizer = tokenizer_from_json(json.load(f))

#Khai b√°o stopword
STOP_WORDS = set("""
a
b
c
d
ƒë
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
z
ii
iii
iv
vii
viii
ix
wi
xj
ng
cij
bij
aji
a_ha
xt
xm
amn
am
ab
ac
bt
at
bh
ah
xiyi
yt
ax
bi_ai
rm
xn
nxn
bn
aij
aa
xxi
a_an
uti
uj
u_i
ux
ut
u_t
u_y
u_u
um
u_x
y_y
oe
ou
xf
rk
t_a
a_t
t_x
p_x
gr
dxdy
dx
dy
p_y
px
pp
yy
tz
t_dt
xk
p_k
p_xn
b·∫±ng_kh√¥ng
b·∫±ng_ng∆∞·ªùi
b·∫±ng_nh∆∞
b·∫±ng_n√†o
b·∫±ng_n·∫•y
b·∫±ng_v√†o
b·∫±ng_ƒë∆∞·ª£c
b·∫±ng_·∫•y
b·ªüi_ai
b·ªüi_ch∆∞ng
b·ªüi_nh∆∞ng
b·ªüi_sao
b·ªüi_th·∫ø
b·ªüi_th·∫ø_cho_n√™n
b·ªüi_t·∫°i
b·ªüi_v√¨
b·ªüi_v·∫≠y
b·ªüi_ƒë√¢u
ch·∫Øc_ch·∫Øn
ch·∫Øc_d·∫°
ch·∫Øc_h·∫≥n
ch·∫Øc_l√≤ng
ch·∫Øc_ng∆∞·ªùi
ch·∫Øc_v√†o
ch·∫Øc_ƒÉn
ch·∫≥ng_l·∫Ω
ch·∫≥ng_nh·ªØng
ch·∫≥ng_n·ªØa
ch·∫≥ng_ph·∫£i
ch·ªâ_ch√≠nh
ch·ªâ_c√≥
ch·ªâ_l√†
ch·ªâ_t√™n
ch·ª©_g√¨
ch·ª©_kh√¥ng
ch·ª©_kh√¥ng_ph·∫£i
ch·ª©_l·∫°i
ch·ª©_l·ªã
ch·ª©_nh∆∞
ch·ª©_sao
c≈©ng_nh∆∞
c≈©ng_n√™n
c≈©ng_th·∫ø
c≈©ng_v·∫≠y
c≈©ng_v·∫≠y_th√¥i
c≈©ng_ƒë∆∞·ª£c
c∆°_ch·ªâ
c∆°_ch·ª´ng
c∆°_d·∫´n
c∆°_h·ªì
c∆°_m√†
c·ª©_nh∆∞
c·ª©_vi·ªác
c·ª©_ƒëi·ªÉm
c·ª±c_l·ª±c
d√π_cho
d√π_d√¨
d√π_g√¨
d√π_r·∫±ng
d√π_sao
d·∫´u_m√†
d·∫´u_r·∫±ng
d·∫´u_sao
d·ªÖ_g√¨
d·ªÖ_khi·∫øn
d·ªÖ_nghe
d·ªÖ_nh∆∞_ch∆°i
hay_bi·∫øt
hay_hay
hay_kh√¥ng
hay_l√†
hay_l√†m
hay_nh·ªâ
hay_n√≥i
hay_sao
hay_tin
hay_ƒë√¢u
ho·∫∑c_l√†
h√£y_c√≤n
h∆°n_c·∫£
h∆°n_h·∫øt
h∆°n_l√†
h∆°n_n·ªØa
h∆°n_tr∆∞·ªõc
h·∫ßu_h·∫øt
l√†_c√πng
l√†_l√†
l√†_nhi·ªÅu
l√†_ph·∫£i
l√†_th·∫ø_n√†o
l√†_v√¨
l√†_√≠t
l√¢u_c√°c
l√¢u_l√¢u
l√¢u_nay
l√¢u_ng√†y
l·∫°i_c√≤n
l·∫°i_gi·ªëng
l·∫°i_l√†m
l·∫°i_ng∆∞·ªùi
l·∫°i_n√≥i
l·∫°i_n·ªØa
l·∫°i_th√¥i
l·∫°i_ƒÉn
l·∫°i_ƒë√¢y
m√†_c·∫£
m√†_kh√¥ng
m√†_l·∫°i
m√†_th√¥i
m√†_v·∫´n
m·∫•t_c√≤n
m·ªçi_gi·ªù
m·ªçi_khi
m·ªçi_l√∫c
m·ªçi_ng∆∞·ªùi
m·ªçi_n∆°i
m·ªçi_s·ª±
m·ªçi_th·ª©
m·ªçi_vi·ªác
m·ªói_l√∫c
m·ªói_l·∫ßn
m·ªói_m·ªôt
m·ªói_ng√†y
m·ªói_ng∆∞·ªùi
nh∆∞_ai
nh∆∞_ch∆°i
nh∆∞_kh√¥ng
nh∆∞_l√†
nh∆∞_nhau
nh∆∞_qu·∫£
nh∆∞_sau
nh∆∞_th∆∞·ªùng
nh∆∞_th·∫ø
nh∆∞_th·∫ø_n√†o
nh∆∞_th·ªÉ
nh∆∞_tr√™n
nh∆∞_tr∆∞·ªõc
nh∆∞_tu·ªìng
nh∆∞_v·∫≠y
nh∆∞_√Ω
nh∆∞ng_m√†
nh∆∞·ª£c_b·∫±ng
nh·∫±m_khi
nh·∫±m_l√∫c
nh·∫±m_v√†o
nh·∫±m_ƒë·ªÉ
nh·ªØng_ai
nh·ªØng_khi
nh·ªØng_l√†
nh·ªØng_l√∫c
nh·ªØng_mu·ªën
nh·ªØng_nh∆∞
n√†o_c≈©ng
n√†o_hay
n√†o_l√†
n√†o_ph·∫£i
n√†o_ƒë√¢u
n√†o_ƒë√≥
n√™n_chi
n√™n_chƒÉng
n√™n_l√†m
n√™n_ng∆∞·ªùi
n√™n_tr√°nh
n·∫øu_c√≥
n·∫øu_c·∫ßn
n·∫øu_kh√¥ng
n·∫øu_m√†
n·∫øu_nh∆∞
n·∫øu_th·∫ø
n·∫øu_v·∫≠y
n·∫øu_ƒë∆∞·ª£c
n·ªØa_khi
n·ªØa_l√†
n·ªØa_r·ªìi
qu·∫£_l√†
qu·∫£_th·∫≠t
qu·∫£_th·∫ø
qu·∫£_v·∫≠y
th√†_l√†
th√†_r·∫±ng
th√¨_gi·ªù
th√¨_l√†
th√¨_ph·∫£i
th√¨_ra
th√¨_th√¥i
th∆∞·ªùng_hay
th∆∞·ªùng_khi
th∆∞·ªùng_s·ªë
th∆∞·ªùng_s·ª±
th∆∞·ªùng_th√¥i
th∆∞·ªùng_th∆∞·ªùng
th∆∞·ªùng_t√≠nh
th∆∞·ªùng_t·∫°i
th∆∞·ªùng_xu·∫•t_hi·ªán
th∆∞·ªùng_ƒë·∫øn
th·∫≠t_ch·∫Øc
th·∫≠t_l√†
th·∫≠t_l·ª±c
th·∫≠t_qu·∫£
th·∫≠t_ra
th·∫≠t_s·ª±
th·∫≠t_th√†
th·∫≠t_t·ªët
th·∫≠t_v·∫≠y
th·∫ø_l√†
th·∫ø_l·∫°i
th·∫ø_m√†
th·∫ø_n√†o
th·∫ø_n√™n
th·∫ø_ra
th·∫ø_s·ª±
th·∫ø_th√¨
th·∫ø_th√¥i
th·∫ø_th∆∞·ªùng
th·∫ø_th·∫ø
th·∫ø_ƒë√≥
v·∫≠y_l√†
v·∫≠y_m√†
v·∫≠y_n√™n
v·∫≠y_ra
v·∫≠y_th√¨
v·∫≠y_∆∞
v·ªõi_l·∫°i
v·ªõi_nhau
v·ª´a_khi
v·ª´a_l√∫c
v·ª´a_m·ªõi
v·ª´a_qua
v·ª´a_r·ªìi
v·ª´a_v·ª´a
√†_n√†y
√†_∆°i
√†o_v√†o
√†o_√†o
√°_√†
√¢u_l√†
√≠t_bi·∫øt
√≠t_c√≥
√≠t_h∆°n
√≠t_khi
√≠t_l√¢u
√≠t_nhi·ªÅu
√≠t_nh·∫•t
√≠t_n·ªØa
√≠t_qu√°
√≠t_ra
√≠t_th√¥i
√≠t_th·∫•y
√¥i_chao
√¥i_th√¥i
√∫i_ch√†
√∫i_d√†o
∆°_hay
∆°_k√¨a
∆°i_l√†
·∫°_∆°i
·∫•y_l√†
·∫ßu_∆°
·∫Øt_h·∫≥n
·∫Øt_l√†
·∫Øt_ph·∫£i
·∫Øt_th·∫≠t
·ªëi_d√†o
·ªëi_gi·ªùi
·ªëi_gi·ªùi_∆°i
·ªì_·ªì
·ªõ_n√†y
·ªù_·ªù
·ªü_l·∫°i
·ªü_nh∆∞
·ªü_nh·ªù
·ªü_nƒÉm
·ªü_tr√™n
·ªü_v√†o
·ªü_ƒë√¢y
·ªü_ƒë√≥
·ªü_ƒë∆∞·ª£c
·ª©_h·ª±
·ª©_·ª´
·ª´_nh√©
·ª´_th√¨
·ª´_√†o
·ª´_·ª´
""".split('\n'))
STOP_WORDS.remove('')

 # khai b√°o k√≠ t·ª± ƒë·∫∑c bi·ªát : 
SPEC_CHARS = set("""
'
‚Ä¶
"
-
`
_
.
‚ô¶
‚Äô
,
&
:
‚Äú
‚Äù
{
}
?
(
)
~
@
#
$
%
^
*
<
>
/
\\
!
ÔÇ±
=
+
‚Ä¢
ÔÉ®
[
]
0
1
2
3
4
5
6
7
8
9
¬©
‚Äì
¬Ø
‚àí
‚àó
Œ∏
;
‚àà
√ó
‚àÄ
‚â§
‚â•
‚Üí
Ô£Æ
Ô£π
‚áí
‚áî
‚àÉ
ÀÜ
¬∑
Œª
|
Œ±
‚àû
‚àá
‚àÇ
Ô£±
Ô£¥
Ô£¥
Ô£Ø
Ô£∞
Ô£∫
Ô£ª
¬µ
œÉ
œÄ
Œ≥
Œ≤
‚âà
‚àù
‚â°
‚â∫
‚àÜ
Œµ
""".split('\n'))
SPEC_CHARS.remove('')

# Define the connection parameters
params = urllib.parse.quote_plus(
    r'DRIVER={ODBC Driver 17 for SQL Server};'
    r'SERVER=mssql-155580-0.cloudclusters.net,19084;'
    r'DATABASE=Group6_1;'
    r'UID=group6_1;'
    r'PWD=Group6123'
)

# Use the connection parameters in the connection string
engine = create_engine(f"mssql+pyodbc:///?odbc_connect={params}")

# Define your list of product names
product_names = [
    "√Åo bomber SST m√†u ƒë·ªè ƒë√¥ ch·∫•t li·ªáu Poly co gi√£n 4 chi·ªÅu -Full tem, tag, m√°c ƒë·∫ßy ƒë·ªß - Phom d√°ng chu·∫©n ph√π h·ª£p c·∫£ nam v√† n·ªØ", 
    "·ªêp L∆∞ng trong H·ªó tr·ª£ h√∫t s·∫°c kh√¥ng d√¢y v√≤ng tr√≤n t·ª´ t√≠nh cho iphone X/XS/XR/Xsmax/11/12/13/14/15/Plus/Pro/Max/Promax", 
    "√Åo Polo Teelab Special ch·∫•t c√° s·∫•u tho√°ng m√°t co d√£n 4c , √°o thun c√≥ c·ªï local brand nam n·ªØ unisex form r·ªông", 
    "√Åo kho√°c nam unisex c·ªï ƒë·ª©ng v·∫£i d√π 2 l·ªõp ph·ªëi m√†u ƒë·ªôc l·∫° h·ªça ti·∫øt ch·ªØ RESUAPRE ƒëi m∆∞a,c·∫£n gi√≥,ch·ªëng n·∫Øng",
    "Th·∫Øt l∆∞ng nam LV, d√¢y l∆∞ng nam Caro ƒë·ªß m√†u, ƒë·∫ßu kh√≥a ch·ªØ nh·ªè A1CLV1",
    "D√¢y l∆∞ng nam cao c·∫•p, th·∫Øt l∆∞ng nam lv, d√¢y l∆∞ng lv th·ªùi trang, m·∫∑t kim lo·∫°i nguy√™n kh·ªëi tr·∫ª trung l·ªãch l√£m TLLV002",
    "ƒê·ªí B·ªò NAM TH·ªÇ THAO THUN COTTON-NLSAO",
    "Th·∫Øt L∆∞ng Da Nam Kh√≥a T·ª± ƒê·ªông Cao C·∫•p D√¢y N·ªãt Nam M·∫∑t Xoay Ch√≠nh H√£ng , Phong C√°ch H√†n Qu·ªëc",
    "·ªêp ƒêi·ªán Tho·∫°i M√†u K·∫πo Tr∆°n H√¨nh G·∫•u 3D Sang Tr·ªçng Cho iPhone 7 8 14 Plus XR 11 14 12 13 Pro MAX X XS MAX",
    "√Åo kho√°c nam c·ªï tr·ª• v·∫£i d√π 2 l·ªõp phong c√°ch tr∆∞·ªùng h·ªçc h√†n qu·ªëc h·ªça ti·∫øt th√™u ch·ªØ adapisl D62",
    "S·∫†C C·ª∞C NHANH - PIN S·∫†C D·ª∞ PH√íNG 30000MAH M·∫∂T G∆Ø∆†NG ƒêEN HUY·ªÄN THO·∫†I",
    "√Åo thun tay l·ª° Sad Boy Nam N·ªØ ch·∫•t Cotton oversize form r·ªông Four Basic"
]

# Set background color
set_bg_and_text_color()

# Create the option menu as a navigation bar
with st.sidebar:
    selected = option_menu(
        menu_title=None,  # This should be a string, but you can set it to None or "" if you don't want a title
        options=["HomePage", "Products", "Reviews"],
        icons=["house", "box", "star-fill"],
        menu_icon="cast",  # This should be a string, and it specifies the icon for the menu itself
        default_index=0,
        orientation="horizontal"
    )


if selected == "HomePage":
# title and insert picture 
    st.title("Experimental program conducted by group 6: Application of Sentiment Analysis")
    st.image("1.jpg")

    user_input = st.text_area("Enter your comment:", "")
    # tr·∫£ v·ªÅ k·∫øt qu·∫£
    if st.button("Analyze"):
        if user_input:  # Ki·ªÉm tra n·∫øu ƒë·∫ßu v√†o kh√¥ng r·ªóng
            try:
                describe_result,quality_result, shipping_result = predict_sentiment(user_input)
                display_result_with_emoji("Describe Product Sentiment:", describe_result)  # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ model1
                display_result_with_emoji("Quality Product Sentiment:", quality_result)  # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ model2
                display_result_with_emoji("Shipping Product Sentiment:", shipping_result)  # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ model3
            except Exception as e:
                st.error(f"An error occurred during prediction: {e}")
        else:
            st.error("Please enter some text to analyze.")

elif selected == "Products":
    # Perform database query
    product = st.selectbox("Choose a product", product_names)
    
    # Escape single quotes in the product name
    product_escaped = product.replace("'", "''")
    
    # Query the database for comments related to the selected product
    query = f"""
    SELECT [M√¥ t·∫£ s·∫£n ph·∫©m], [Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m], [Ch·∫•t l∆∞·ª£ng v·∫≠n chuy·ªÉn]
    FROM Shopee
    WHERE [T√™n sp] = N'{product_escaped}'
    """
    df = pd.read_sql_query(query, engine)
    
    # Replace the sentiment values with numerical values if needed
    sentiment_map = {0: 'Negative', 1: 'Neutral', 2: 'Positive'}
    df = df.replace(sentiment_map)

    # Aggregate the comments by sentiment for each criterion
    describe_counts = df['M√¥ t·∫£ s·∫£n ph·∫©m'].value_counts()
    quality_counts = df['Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m'].value_counts()
    shipping_counts = df['Ch·∫•t l∆∞·ª£ng v·∫≠n chuy·ªÉn'].value_counts()

    # Visualize with pie charts
    fig_describe = px.pie(values=describe_counts, names=describe_counts.index, title='Describe Product Sentiment')
    fig_quality = px.pie(values=quality_counts, names=quality_counts.index, title='Quality Product Sentiment')
    fig_shipping = px.pie(values=shipping_counts, names=shipping_counts.index, title='Shipping Product Sentiment')

    # Display the pie charts in Streamlit
    st.plotly_chart(fig_describe)
    st.plotly_chart(fig_quality)
    st.plotly_chart(fig_shipping)





